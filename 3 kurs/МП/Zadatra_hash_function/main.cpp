//   Создать класс «хеш-таблица» и класс данных согласно варианту. В хеш-таблице разрещение коллизий происходит с помощью метода цепочек,
// используется модульная хеш-функция Н(k)=k mod 11. Данная хеш-таблица работает с объектами созданного класса данных. Ключ указан в
// варианте. В классе должны быть следующие методы:
//     -конструктор(ы);                            -вывод всех элементов хеш-таблицы;
//     -деструктор;                                -добавление элемента в хеш-таблицу;
//     -удаление злемента из хеш-таблицы;          -поиск элемента по ключу в хеш-таблице;
//   При вставке объектов класса в хеш-таблицу использовать ввод из файла. Методы добавления, удаления, поиска элемента в хеш-таблице
// должны уметь считать длины поисковых путей, потребовавшихся для выполнения алгоритма добавления, удаления, поиска. Длины поисковых
// путей суммируются, а затем подсчитывается средняя длина поиска. Можно добавить другие методы. Написать много модульную программу,
// демонстрирующую работу с классом «хеш-таблица». Программа должна содержать меню, позволяющее осуществить проверку всех методов класса.

//   Вариант 4: Класс товар на складе содержит поля: номер склада, код товара, наименование товара, дата поступления на склад, срок
// хранения в днях, количество единиц товара, цена за единицу товара. Ключ-код товара.

#include "hash.h"
int main()
{
    /////////////////////// Метод цепочек
    Hash_Table Table;
    int key = 0;
    while (key != 5)
    {
        cout << "1. Взять данные из файла input.txt \n2. Выводить хэш-таблицы \n3. Поиск по коду товара \n4. Удалить по коду товара \n5. Выход \nВвод: ";
        cin >> key;
        switch (key)
        {
        case 1:
            Table.Get_data();
            break;
        case 2:
            Table.Print();
            break;
        case 3:
            int x;
            cout << "Поиск по коду: ";
            cin >> x;
            Table.Find(x);
            break;
        case 4:
            cout << "Удалить по коду: ";
            cin >> x;
            Table.Delete(x);
            break;
        case 5:
            key = 5;
            break;
        default:
            cout << "Ошибка" << endl;
            key = 0;
            break;
        }
    }
}